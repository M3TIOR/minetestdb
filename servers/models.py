from django.db import models
from django.contrib.auth.models import User

import uuid

# NOTE: Consider depricating / removing
class Tag(models.Model):
    title = models.CharField(max_length=20)

    def __str__(self):
        return self.title


class Server(models.Model):
    # this is a unique identifier to the database.
    # don't try and label it uuid though, it breaks things like that
    #object_id = models.UUIDField(primary_key=True, default=uuid.uuid4)

    # So actually... when using IDs / UUIDs, these fields are autogenerated by default
    #id = ...
    #pk = ...
    #
    # So you can do:
    #	Server.objects.all()[n].id || Server.objects.all()[n].pk

    name = models.CharField(max_length=200)
    owner = models.ForeignKey(User, None, null=True)
    address = models.URLField(max_length=200, null=True)
    website = models.URLField(max_length=200, null=True)
    description = models.TextField(null=True)
    votes = models.IntegerField(default=0, null=True)
    mt_version = models.CharField(max_length=10, null=True)
    tags = models.ManyToManyField(Tag, verbose_name='Tags',  blank=True)
